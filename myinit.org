#+STARTIP: overview

This file is called from ~init.el~ which has the definition of the MELPA repository and  ~use-package~ to install all of the packages

* Set default tweaks

  #+BEGIN_SRC emacs-lisp
    ;; Sets default directory
    (setq default-directory "~/")
    ;; Inhibits the Emacs startup message w/ tutorial, etc..
    (setq inhibit-startup-message t)
    (tool-bar-mode -1)

    ;; Whenever emacs asks for yes or no, just y or n
    (fset 'yes-or-no-p 'y-or-n-p)

    ;; Reload buffer without reopening with F5
    (global-set-key (kbd "<f5>") 'revert-buffer)

    ;; Start emacs with full screen
    (add-to-list 'default-frame-alist '(fullscreen . maximized))

    ;; Show line numbering on all buffers
    ;; Ideally, I'd like only line numbering
    ;; on the left buffers but I don't know
    ;; how to do it.
    (global-display-line-numbers-mode)

    ;; To highlight complementary parenthesis when cursor is on top
    (show-paren-mode 1)
    (setq show-paren-delay 0)
    (setq org-src-tab-acts-natively t)

    ;; Set lines to continue if they're too long instead of
    ;; continuing them in the next line
    (setq-default truncate-lines t)
    ;; (setq toggle-truncate-lines t)
    ;; (setq truncate-partial-width-windows nil)

    ;; Remaps kill this buffer to familiar CTRL + W
    (global-set-key [(control w)] 'kill-this-buffer)
    (global-set-key (kbd "M-k")  'kill-region)
    (global-set-key (kbd "M-k")  'kill-region)
  #+END_SRC

* Save all temporary files in auto-save
** Saves backup and auto-save in temporary directory

   #+BEGIN_SRC emacs-lisp
     ;; store all backup and autosave files in the tmp dir
     (setq backup-directory-alist
	   `((".*" . ,temporary-file-directory)))
     (setq auto-save-file-name-transforms
	   `((".*" ,temporary-file-directory t)))

     (setq-default auto-save-default t)

   #+END_SRC

* Install try
** Package to try packages for only that session
   #+BEGIN_SRC emacs-lisp
     (use-package try
       :ensure t)
   #+END_SRC

* Auto completion 
** Enable ido package to make auto-completion better for completing commands in mini-buffer
   #+BEGIN_SRC emacs-lisp
     (setq indo-enable-flex-matching t)
     (setq indo-everywhere t)
     (setq ido-create-new-buffer 'always)
     (ido-mode 1)
   #+END_SRC

** which-key helps to auto-complete commands in mini-buffer. Type C-c and allow 2 seconds to pass, a pop up menu shows you possible keys
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :ensure t
       :config (which-key-mode))
   #+END_SRC

** smart-parens for completing parenthesis brackets, etc..
   #+BEGIN_SRC emacs-lisp
     (use-package smartparens
       :ensure t
       :config (smartparens-global-mode t))

     ;; To highlight some text and press * to wrap it in * *
     (sp-with-modes '(org-mode)
       (sp-local-pair "*" "*"))

   #+END_SRC

* Adds 80 character line tweaks
  #+BEGIN_SRC emacs-lisp

    (setq-default
     whitespace-line-column 80
     whitespace-style       '(face lines-tail))

    (add-hook 'prog-mode-hook #'whitespace-mode)

    (setq-default fill-column 80)

  #+END_SRC
* org-mode
** Installs and loads org-mode + adds flyspell for spell-checking
   - See http://pragmaticemacs.com/emacs/check-and-fix-spelling-as-you-type/ for the spell-checking part. I've removed flyspell because it needs to be installed in the computer
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :ensure t
       :config
       (add-hook 'org-mode-hook (lambda() (org-bullets-mode 1))))
     ;;        (add-hook 'text-mode-hook 'flyspell-mode))

     (use-package org
       :bind (:map org-mode-map
		   ("M-n" . eval-region)))

     (with-eval-after-load 'org
       (bind-key "M-n" #'eval-region org-mode-map))

   #+END_SRC

** Adds languages to org-mode

   #+BEGIN_SRC emacs-lisp
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((R . t)))

   #+END_SRC

** Setup org-mode
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c l") 'org-store-link)
     (global-set-key (kbd "C-c c") 'org-capture)
     (global-set-key (kbd "C-c a") 'org-agenda)
     (global-set-key (kbd "C-c b") 'org-switchb)

     (setq org-todo-keywords'
	   ((sequence "TODO" "IN PROCESS" "WAITING" "|" "DONE"))
	   )

     ;; To archive all TODO's in an org file.
     ;; Taken from https://stackoverflow.com/questions/6997387/how-to-archive-all-the-done-tasks-using-a-single-command/27043756#27043756
     (defun org-archive-done-tasks ()
       (interactive)
       (org-map-entries
	(lambda ()
	  (org-archive-subtree)
	  (setq org-map-continue-from (org-element-property :begin (org-element-at-point))))
	"/DONE" 'file))

     (global-set-key (kbd "C-x C-a C-a") 'org-archive-done-tasks)

     ;; Sets a closed timestamp
     (setq org-log-done 'time)

     ;; Prompts for a note after TODO is set to DONE
     (setq org-log-done 'note)
#+END_SRC

** Setup org-agenda
#+BEGIN_SRC emacs-lisp
  ;; (defun cj-org-agenda-show-agenda-and-todo (&optional arg)
  ;;   (interactive "P")
  ;;   (org-agenda arg "n"))

 
  ;; (define-key global-map (kbd "C-c a") 'cj-org-agenda-show-agenda-and-todo)

  (setq org-agenda-files
	(list "~/google_drive/gtd/inbox.org" "~/google_drive/gtd/gcal.org"))

#+END_SRC


** org-capture templates
#+BEGIN_SRC emacs-lisp

  (setq org-capture-templates
	'(("a" "Appointment" entry (file  "~/google_drive/gtd/gcal.org" )
	   "* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")
	  ("t" "To Do Item" entry (file+headline "~/google_drive/gtd/inbox.org" "To Do")
	   "* TODO %?\n%u" :prepend t)))


#+END_SRC

** Insert today's date
#+BEGIN_SRC emacs-lisp
  ;; from http://emacswiki.org/emacs/InsertingTodaysDate
  (defun insert-todays-date (arg)
    (interactive "P")
    (insert (if arg
		(format-time-string "%d-%m-%Y")
	      (format-time-string "%Y-%m-%d"))))
#+END_SRC
* On startup
Do not move this to the front because I do stuff in ~~org-mode~~ which affects org files
** Open inbox
#+BEGIN_SRC emacs-lisp
    ;; ;; On startup open TODO list
    (find-file "~/google_drive/gtd/inbox.org")
#+END_SRC
* List buffers
** Switch list-buffer to ibuffer
 #+BEGIN_SRC emacs-lisp
   (defalias 'list-buffers 'ibuffer)
 #+END_SRC
** Package to place numbers on the windows to switch quicker
 #+BEGIN_SRC emacs-lisp
   (use-package ace-window
     :ensure t
     :init
     (progn
       (global-set-key [remap other-window] 'ace-window)
       (custom-set-faces
	'(aw-leading-char-face
	  ((t (:inherit- ace-jump-face-foreground :height 3.0)))))
       ))
 #+END_SRC

* org-ref
** Package to handle references and notes in literature reviews
 #+BEGIN_SRC emacs-lisp
   (use-package org-ref
     :ensure t
     :config
     (setq reftex-default-bibliography '("~/google_drive/literature/references.bib")
	   org-ref-bibliography-notes "~/google_drive/literature/notes.org"
	   org-ref-default-bibliography  '("~/google_drive/literature/references.bib")
	   org-ref-pdf-directory "~/google_drive/literature/pdfs/"))
 #+END_SRC

* YAML mode
#+BEGIN_SRC emacs-lisp

(use-package yaml-mode
  :ensure t)

(add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))

#+END_SRC
* Searching in Emacs
** swiper
#+BEGIN_SRC emacs-lisp
  ;; counsel is used by swiper so install before
  (use-package counsel
    :ensure t
    :bind
    (("M-y" . counsel-yank-pop)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line))
    )

  (use-package swiper
    :ensure t
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq enable-recursive-minibuffers t)
      ;; enable this if you want `swiper' to use it
      ;; (setq search-default-mode #'char-fold-to-regexp)
      (global-set-key "\C-s" 'swiper)
      (global-set-key (kbd "C-c C-r") 'ivy-resume)
      (global-set-key (kbd "<f6>") 'ivy-resume)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-find-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      (global-set-key (kbd "C-c g") 'counsel-git)
      (global-set-key (kbd "C-c j") 'counsel-git-grep)
      (global-set-key (kbd "C-c k") 'counsel-ag)
      (global-set-key (kbd "C-x l") 'counsel-locate)
      (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
      (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
      ))
#+END_SRC

** avy for moving quickly in a file
#+BEGIN_SRC emacs-lisp
  ;; avy for moving quickly through files
  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-char-2))
#+END_SRC

* Emacs theme
** Spacemacs: used this before, keeping here if want to come back

 #+BEGIN_SRC emacs-lisp
   ;; Set spacemacs theme
   ;; This is a bit weird because the package is actually 'spacemacs-theme'
   ;; but I can't find it on MELPA through emacs (although it is on melpa.org)
   ;; However, this ewal-spacemacs-themes seems to work
   ;; (use-package ewal-spacemacs-themes
   ;;   :ensure t
   ;;   :config (load-theme 'spacemacs-dark t))
 #+END_SRC

** moe-theme: used this before, keeping here if want to come back
  #+BEGIN_SRC emacs-lisp

    ;; (use-package moe-theme
    ;;   :ensure t
    ;;   :config
    ;;   (setq moe-theme-highlight-buffer-id t)
    ;;   (moe-dark))

    ;; (set-face-attribute 'default nil :font "Monaco-13")

  #+END_SRC
** Doom theme: current 
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t)

  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	doom-themes-enable-italic t) ; if nil, italics is universally disabled

  ;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
  ;; may have their own settings.
  (load-theme 'doom-dracula t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)

  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
  (doom-themes-treemacs-config)

  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config)

  ;; Taken partially from https://github.com/ianpan870102/.personal-emacs.d/blob/master/init.el
  ;; START HERE

  ;; (use-package spacemacs-common
  ;;   :ensure spacemacs-theme
  ;;   :custom-face
  ;;   (line-number              ((t (:foreground "#414B4f" :background "#282B2E"))))
  ;;   (line-number-current-line ((t (:foreground "#616B6f" :background "#282B2E"))))
  ;;   (highlight-symbol-face    ((t (:background "#44444f"))))
  ;;   :custom
  ;;   (spacemacs-theme-comment-bg nil)
  ;;   (spacemacs-theme-comment-italic t)
  ;;   :config
  ;;   (load -theme 'spacemacs-dark t))

  (use-package solaire-mode
    :ensure t
    :hook (((change-major-mode after-revert ediff-prepare-buffer) . turn-on-solaire-mode)
	   (minibuffer-setup . solaire-mode-in-minibuffer))
    :config
    (solaire-mode-swap-bg)
    (solaire-global-mode +1))

  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode)
    :custom
    (inhibit-compacting-font-caches t)
    (doom-modeline-buffer-file-name-style 'relative-from-project)
    (doom-modeline-bar-width 1)
    (doom-modeline-modal-icon nil)
    (doom-modeline-height 15)
    (doom-modeline-env-python-executable "python3")
    :config
    (when (member "Menlo" (font-family-list))
      (set-face-attribute 'mode-line nil :height 110 :font "Menlo")
      (set-face-attribute 'mode-line-inactive nil :height 110 :font "Menlo")))

  (use-package all-the-icons
    :ensure t
    :custom
    (all-the-icons-scale-factor 1.0)
    (all-the-icons-install-fonts))

  (use-package all-the-icons-ivy
    :ensure t
    :hook (after-init . all-the-icons-ivy-setup)
    :custom
    (all-the-icons-ivy-buffer-commands '()))

  (use-package all-the-icons-dired
    :ensure t
    :hook (dired-mode . all-the-icons-dired-mode))

  ;; (use-package centaur-tabs
  ;;   :demand
  ;;   :bind (("C-S-<tab>" . centaur-tabs-backward)
  ;; 	 ("C-<tab>" . centaur-tabs-forward)
  ;; 	 ("C-x p" . centaur-tabs-counsel-switch-group))
  ;;   :custom
  ;;   (centaur-tabs-set-bar 'under)
  ;;   (x-underline-at-descent-line t)
  ;;   (centaur-tabs-set-modified-marker t)
  ;;   (centaur-tabs-modified-marker " ● ")
  ;;   (centaur-tabs-cycle-scope 'tabs)
  ;;   (centaur-tabs-height 30)
  ;;   (centaur-tabs-set-icons t)
  ;;   (centaur-tabs-close-button " × ")
  ;;   :config
  ;;   (centaur-tabs-mode +1)
  ;;   (centaur-tabs-headline-match)
  ;;   (centaur-tabs-group-by-projectile-project)
  ;;   (when (member "Arial" (font-family-list))
  ;;     (centaur-tabs-change-fonts "Arial" 130)))

  ;; (use-package highlight-symbol
  ;;   :ensure t
  ;;   :hook (prog-mode . highlight-symbol-mode)
  ;;   :custom
  ;;   (high light-symbol-idle-delay 0.3))

  (use-package highlight-numbers
    :ensure t
    :hook (prog-mode . highlight-numbers-mode))

  (use-package highlight-operators
    :ensure t
    :hook (prog-mode . highlight-operators-mode))

  (use-package highlight-escape-sequences
    :ensure t
    :hook (prog-mode . hes-mode))
  ;; END HERE

 #+END_SRC

* Projectile
#+BEGIN_SRC emacs-lisp
  ;; If you find an error, ag needs to be installed from terminal as well.
  ;; homebrew install the_silver_searcher for macs
  ;; sudo apt-get install silversearcher-ag from ubuntu

  ;; Helm search for projectile. Allows to search for files within a project
  (use-package helm-projectile
    :ensure t
    :config
    (helm-projectile-on))

  ;; Needed by helm-projectile for esearch
  (use-package helm-ag
    :ensure t)

  (use-package projectile
    :ensure t
    :bind ("C-c p" . projectile-command-map)
    :config
    (projectile-global-mode)
    (setq projectile-completion-system 'helm)
    (setq projectile-switch-project-action 'helm-projectile))
  (projectile-discover-projects-in-directory "~/repositories/")

  ;; (use-package counsel-projectile
  ;; :ensure t
  ;; :config
  ;; ;; (counsel-projectile-mode))

#+END_SRC
* ESS for statistics
** Load ESS
 #+BEGIN_SRC emacs-lisp
   (use-package ess
     :ensure t
     :config
     ;; Add latex symbol completion in julia buffer mode as well.
     (add-hook 'ess-julia-mode-hook
	       (lambda()
		 (add-hook 'completion-at-point-functions
			   'ess-julia-latexsub-completion nil 'local)))
     (setq tab-always-indent 'complete))

 #+END_SRC

** Set different modes in ESS
#+BEGIN_SRC emacs-lisp

  (use-package poly-R
    :ensure t)

  (use-package poly-markdown
    :ensure t)

  ;;; R modes
  (add-to-list 'auto-mode-alist '("\\.md" . poly-markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.Snw" . poly-noweb+r-mode))
  (add-to-list 'auto-mode-alist '("\\.Rnw" . poly-noweb+r-mode))
  (add-to-list 'auto-mode-alist '("\\.Rmd" . poly-markdown+r-mode))
  (add-to-list 'auto-mode-alist '("\\.rmd" . poly-markdown+r-mode))

  ;; Export files with the same name as the main file
  ;; Taken from https://github.com/karawoo/prelude/blob/db60a8e448757b1e07b7323e411c3d5d4d1b7d45/personal/custom.el#L751-L752
  (setq polymode-exporter-output-file-format "%s")

#+END_SRC
** Tweaks to ESS config
#+BEGIN_SRC emacs-lisp
  ;; Don't restore history or save on exit
  (setq-default inferior-R-args "--no-restore-history --no-save")

  (setq ess-ask-for-ess-directory nil)

  ;; ESS doesn't slow down Emacs
  ;; (setq ess-eval-visibly 'nowait) ;; in 12.09-1
  (setq ess-eval-visibly nil)
  (setq ess-eval-visibly-p nil)
  ;; Smartparens in R repl.
  (add-hook 'ess-R-post-run-hook (lambda () (smartparens-mode 1)))
  (add-hook 'inferior-ess-mode-hook (lambda () (smartparens-mode 1)))

  ;; Set the style to RStudio. This gives me stuff like tab spaces are 2 spaces not 4
  (setq ess-default-style 'RStudio)
#+END_SRC

** Forces help to appear only on R script
#+BEGIN_SRC emacs-lisp
;; Doesn't work until now. I think the variable display-buffer-alist
  (setq display-buffer-alist
	'(("*R*"
	   nil
	   (dedicated . t))))

#+END_SRC
** Auto-completion in ESS
#+BEGIN_SRC emacs-lisp
  ;; Set up company, i.e. code autocomplete
  (use-package company
    :ensure t
    :config
    ;; Enable company mode everywhere
    (add-hook 'after-init-hook 'global-company-mode)
    )

  ;; Set up TAB to manually trigger autocomplete menu
  (define-key company-mode-map (kbd "TAB") 'company-complete)
  (define-key company-active-map (kbd "TAB") 'company-complete-common)
  ;; Set up M-h to see the documentation for items on the autocomplete menu
  (define-key company-active-map (kbd "M-h") 'company-show-doc-buffer)

  ;; If you would want to have the help pop ups in company mode
  ;; (use-package company-quickhelp
  ;;   :ensure t
  ;;   :config
  ;;   (company-quickhelp-mode))

  ;;   (use-package auto-complete
  ;;     :ensure t
  ;;     :init
  ;;     (progn
  ;;       (ac-config-default)
  ;;       (global-auto-complete-mode t)
  ;;       ))

  ;;   ;; To allow for TAB completion
  ;;   ;; https://stackoverflow.com/questions/49232454/emacs-ess-how-to-auto-complete-library-function
  ;;   (use-package company
  ;;     :ensure t
  ;;     :init (require 'company))

  ;;   (setq tab-always-indent 'complete)

  ;;   (setq company-idle-delay 0.5
  ;; 	company-show-numbers t
  ;; 	company-minimum-prefix-length 2
  ;; 	company-tooltip-flip-when-above t)

  ;;   (global-set-key (kbd "C-M-/") #'company-complete)
  ;;   (global-company-mode)
  ;;   (defun my-ess-hook ()
  ;;     ;; ensure company-R-library is in ESS backends
  ;;     (make-local-variable 'company-backends)
  ;;     (cl-delete-if (lambda (x) (and (eq (car-safe x) 'company-R-args))) company-backends)
  ;;     (push (list 'company-R-args 'company-R-objects 'company-R-library :separate)
  ;; 	  company-backends))
  ;; 	  (add-hook 'ess-mode-hook 'my-ess-hook)
  ;; 	  (with-eval-after-load 'ess
  ;;     (setq ess-use-company t))

#+END_SRC
** Pipe operator shortcut
#+BEGIN_SRC emacs-lisp
  ;; Taken from https://github.com/karawoo/prelude/blob/db60a8e448757b1e07b7323e411c3d5d4d1b7d45/personal/custom.el
  ;; %>% shortcut
  ;; http://emacs.stackexchange.com/a/8055/7060
  (defun then_R_operator ()
    "R - %>% operator or 'then' pipe operator"
    (interactive)
    (insert " %>% "))
  (define-key ess-mode-map (kbd "C->") 'then_R_operator)
  (define-key inferior-ess-mode-map (kbd "C->") 'then_R_operator)
#+END_SRC

** Assign operator shortcut
#+BEGIN_SRC emacs-lisp
  (defun assign_R_operator ()
    "R - Insert <- operator"
    (interactive)
    (insert " <- "))
  (define-key ess-mode-map (kbd "C-<") 'assign_R_operator)
  (define-key inferior-ess-mode-map (kbd "C-<") 'assign_R_operator)
#+END_SRC

** Make Shift-Enter do a lot in ESS
#+BEGIN_SRC emacs-lisp

  (add-hook 'inferior-ess-mode-hook
      '(lambda nil
	    (define-key inferior-ess-mode-map [\C-up]
		'comint-previous-matching-input-from-input)
	    (define-key inferior-ess-mode-map [\C-down]
		'comint-next-matching-input-from-input)
	    (define-key inferior-ess-mode-map [\C-x \t]
		'comint-dynamic-complete-filename)
       )
   )

  (setq ess-ask-for-ess-directory nil)
    (setq ess-local-process-name "R")
    (setq ansi-color-for-comint-mode 'filter)
    (setq comint-scroll-to-bottom-on-input t)
    (setq comint-scroll-to-bottom-on-output t)
    (setq comint-move-point-for-output t)

    (defun my-ess--R ()
      (interactive)
      (if (not (member "*R*" (mapcar (function buffer-name) (buffer-list))))
	(progn
	  (delete-other-windows)
	  (setq w1 (selected-window))
	  (setq w1name (buffer-name))
	  (setq w2 (split-window w1 nil t))
	  (R)
	  (set-window-buffer w2 "*R*")
	  (set-window-buffer w1 w1name))))
#+END_SRC

** Scratch script R
#+BEGIN_SRC emacs-lisp
  (defun R-scratch ()
    (interactive)
    (progn
      (delete-other-windows)
      (setq new-buf (get-buffer-create "scratch.R"))
      (switch-to-buffer new-buf)
      (R-mode)
      (setq w1 (selected-window))
      (setq w1name (buffer-name))
      (setq w2 (split-window w1 nil t))
      (if (not (member "*R*" (mapcar (function buffer-name) (buffer-list))))
	  (R))
      (set-window-buffer w2 "*R*")
      (set-window-buffer w1 w1name)))

  (global-set-key (kbd "C-x 9") 'R-scratch)

#+END_SRC

** Add Shiny shortcut
#+BEGIN_SRC emacs-lisp
  (defun ess-r-shiny-run-app (&optional arg)
    "Interface for `shiny::runApp()'.
     With prefix ARG ask for extra args."
    (interactive)
    (inferior-ess-r-force)
    (ess-eval-linewise
     "shiny::runApp(\".\")\n" "Running app" arg
     '("" (read-string "Arguments: " "recompile = TRUE"))))
#+END_SRC

** Insert RMarkdown chunk
#+BEGIN_SRC emacs-lisp

(defun new-chunk (header)
  "Insert an r-chunk in markdown mode. Necessary due to interactions between polymode and yasnippet"
  (interactive "sHeader: ")
  (insert (concat "```{r " header "}\n\n```"))
  (forward-line -1))

#+END_SRC

** Drake workflow
   #+BEGIN_SRC emacs-lisp
  (require 'ess-site)

  (defun text-around-cursor (&optional rows-around)
    (let ((rows-around (or rows-around 10))
	  (current-line (line-number-at-pos))
	  (initial-point (point)))
      (save-mark-and-excursion
	(goto-line (- current-line rows-around))
	(set-mark (point))
	(goto-line (+ current-line rows-around))
	(end-of-line)
	;; Return a list of text, index
	(list (buffer-substring-no-properties (mark) (point))
	      (+ (- initial-point (mark)) 1)))))

  (defun strip-ess-output-junk (r-buffer)
    (with-current-buffer r-buffer
      (goto-char (point-min))
      (while (re-search-forward "\\+\s" nil t)
	(replace-match ""))))

  (defun exec-r-fn-to-buffer (r_fn text)
    (let ((r-process (ess-get-process))
	  (r-output-buffer (get-buffer-create "*R-output*")))
      (ess-string-command
       (format "cat(%s(%s))\n" r_fn text)
       r-output-buffer nil)
      (strip-ess-output-junk r-output-buffer)
      (save-mark-and-excursion
	(goto-char (point-max))
	(newline)
	(insert-buffer r-output-buffer))))

  ;; fnmate functions for keybindings
  (defun fnmate ()
    (interactive)
    (let* ((input-context (text-around-cursor))
	   (text (prin1-to-string (car input-context)))
	   (index (cdr input-context)))
      (ess-eval-linewise (format "fnmate::fnmate_fn.R(%s, %s)" text index))))

  (defun fnmate-below ()
    (interactive)
    (let* ((input-context (text-around-cursor))
	   (text (prin1-to-string (car input-context)))
	   (index (cdr input-context))
	   (args (format "%s, %s" text index)))
      (exec-r-fn-to-buffer "fnmate::fnmate_below" args)))

  (define-key ess-mode-map (kbd "C-c C-e C-f") 'fnmate)
  (define-key ess-mode-map (kbd "C-c C-e f") 'fnmate)


  (defun ess-drake-rmake ()
    "Interface for drake::r_make"
    (interactive)
    (inferior-ess-r-force)
    (ess-eval-linewise
     "drake::r_make()"))

  (define-key ess-mode-map (kbd "C-c C-e m") 'ess-drake-rmake)
  (define-key ess-mode-map (kbd "C-c C-e C-m") 'ess-drake-rmake)


  (defun ess-drake-loadd ()
    "Interface for drake::loadd"
    (interactive)
    (inferior-ess-r-force)
    (ess-eval-linewise
     "drake::loadd()"))

  (define-key ess-mode-map (kbd "C-c C-e p") 'ess-drake-loadd)
  (define-key ess-mode-map (kbd "C-c C-e C-p") 'ess-drake-loadd)

  (defun ess-drake-readd ()
    "Interface for drake::readd"
    (interactive)
      (ess-eval-linewise (format "%s <- drake::readd(%s)" (current-word) (current-word))))

  (define-key ess-mode-map (kbd "C-c C-e o") 'ess-drake-readd)
  (define-key ess-mode-map (kbd "C-c C-e C-o") 'ess-drake-readd)
#+END_SRC

* Stan
** Install Stan
 #+BEGIN_SRC emacs-lisp

   (use-package stan-mode
     :ensure t
     :init (require 'stan-mode))

   (use-package stan-snippets
     :ensure t
     :init (require 'stan-snippets))

(setq stan-use-auto-complete t) 
 #+END_SRC

* Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :init
    (progn
      (bind-key "C-x g" 'magit-status)
      ))

  (define-key magit-mode-map (kbd "<tab>") 'magit-section-toggle)


  ;; (setq magit-status-margin
  ;;   '(t "%Y-%m-%d %H:%M " magit-log-margin-width t 18))
  ;;     (use-package git-gutter
  ;;     :ensure t
  ;;     :init
  ;;     (global-git-gutter-mode +1))

  ;;     (global-set-key (kbd "M-g M-g") 'hydra-git-gutter/body)


  ;;     (use-package git-timemachine
  ;;     :ensure t
  ;;     )
  ;;   (defhydra hydra-git-gutter (:body-pre (git-gutter-mode 1)
  ;; 			      :hint nil)
  ;;     "
  ;;   Git gutter:
  ;;     _j_: next hunk        _s_tage hunk     _q_uit
  ;;     _k_: previous hunk    _r_evert hunk    _Q_uit and deactivate git-gutter
  ;;     ^ ^                   _p_opup hunk
  ;;     _h_: first hunk
  ;;     _l_: last hunk        set start _R_evision
  ;;   "
  ;;     ("j" git-gutter:next-hunk)
  ;;     ("k" git-gutter:previous-hunk)
  ;;     ("h" (progn (goto-char (point-min))
  ;; 		(git-gutter:next-hunk 1)))
  ;;     ("l" (progn (goto-char (point-min))
  ;; 		(git-gutter:previous-hunk 1)))
  ;;     ("s" git-gutter:stage-hunk)
  ;;     ("r" git-gutter:revert-hunk)
  ;;     ("p" git-gutter:popup-hunk)
  ;;     ("R" git-gutter:set-start-revision)
  ;;     ("q" nil :color blue)
  ;;     ("Q" (progn (git-gutter-mode -1)
  ;; 		;; git-gutter-fringe doesn't seem to
  ;; 		;; clear the markup right away
  ;; 		(sit-for 0.1)
  ;; 		(git-gutter:clear))
  ;; 	 :color blue))


  ;; (use-package git-gutter
  ;;   :ensure t
  ;;   :custom
  ;;   (git-gutter:update-interval 0.05))

  ;; (use-package git-gutter-fringe
  ;;   :ensure t
  ;;   :config
  ;;   (global-git-gutter-mode +1)
  ;;   (setq-default fringes-outside-margins t)
  ;;   (define-fringe-bitmap 'git-gutter-fr:added [224]
  ;;     nil nil '(center repeated))
  ;;   (define-fringe-bitmap 'git-gutter-fr:modified [224]
  ;;     nil nil '(center repeated))
  ;;   (define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240]
  ;;     nil nil 'bottom))

 #+END_SRC

* Python
** Set Python interpreter
#+BEGIN_SRC emacs-lisp
  ;; You had some problems making sure elpy had autocompletion in both
  ;; script and inferior python. This was due to elpy have python2.7 in
  ;; RPC Python in elpy-config (in Emacs) where it should have python3.
  ;; Both Interactive Python and RPC Python should have python3.
  (setq python-shell-interpreter "python3.8")
  (setq elpy-rpc-python-command "python3.8")
  (setq elpy-rpc-virtualenv-path 'current)

#+END_SRC
** Install elpy
#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :init
    (elpy-enable))

  (setq indent-tabs-mode nil)
  (setenv "WORKON_HOME" "~/miniconda3/envs/")

 #+END_SRC

** Assign operator shortcut
#+BEGIN_SRC emacs-lisp
  (defun assign_python_operator ()
    "Python - Insert = operator"
    (interactive)
    (insert " = "))
  (define-key python-mode-map (kbd "C-<") 'assign_python_operator)
  (define-key inferior-python-mode-map (kbd "C-<") 'assign_python_operator)
#+END_SRC

** Scratch script Python
#+BEGIN_SRC emacs-lisp

  (defun python-scratch ()
    (interactive)
    (progn
      (delete-other-windows)
      (setq new-buf (get-buffer-create "scratch.py"))
      (switch-to-buffer new-buf)
      (python-mode)
      (setq w1 (selected-window))
      (setq w1name (buffer-name))
      (setq w2 (split-window w1 nil t))
      (if (not (member "*Python*" (mapcar (function buffer-name) (buffer-list))))
	  (run-python))
      (set-window-buffer w2 "*Python*")
      (set-window-buffer w1 w1name)))

  (global-set-key (kbd "C-x 7") 'python-scratch)

#+END_SRC

** Make Shift-Enter similar to ESS
#+BEGIN_SRC emacs-lisp
  (defun py-eval-region-or-line-and-step ()
    (interactive)
    (if (and transient-mark-mode mark-active
	     (> (region-end) (region-beginning)))
	(elpy-shell-send-region-or-buffer)
      (progn
	(end-of-line)
	(let ((eol (point)))
	  (beginning-of-line)
	  (python-shell-send-region (point) eol))
	(python-nav-forward-statement)
	)))

  ;; Map py-eval-region-or-line-and-step to M-ret because that's how I have it set
  ;; for ESS
  (define-key python-mode-map (kbd "C-<return>") 'py-eval-region-or-line-and-step)
#+END_SRC
* Yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
      (yas-global-mode 1))
#+END_SRC
* Flycheck
#+BEGIN_SRC emacs-lisp

  ;; (use-package flycheck
  ;;   :ensure t
  ;;   :init (global-flycheck-mode))

  ;; '(flycheck-lintr-caching nil) ;; need to customised it inside of Emacs
  ;; (add-hook 'ess-mode-hook (lambda () (flycheck-mode t)))
  ;; '(flycheck-check-syntax-automatically (quote (save idle-change mode-enabled)))
  ;; '(flycheck-idle-change-delay 100) ;; Set delay based on what suits you the best


  ;; '(flyche ck-check-syntax-automatically (quote '(save mode-enable)))
  ;; '(flycheck-idle-change-delay 4) ;; Set delay based on what suits you the best

  ;  In case you want to add flycheck every time you save.
  ;; (setq flycheck-check-syntax-automatically '(save mode-enable))
  ;; the default value was '(save idle-change new-line mode-enabled)

#+END_SRC
* expand-region
#+BEGIN_SRC emacs-lisp

  (use-package expand-region
    :ensure t
    :init (global-set-key (kbd "C-=") 'er/expand-region)
    )

  (pending-delete-mode t)


#+END_SRC
* Google Calendar and Org-agenda
** Google Calendar
#+BEGIN_SRC emacs-lisp

  ;; Go https://console.developers.google.com/apis/credentials/oauthclient/672622840611-q5j91p8rojnjf5sghgvems2kjkhslg9v.apps.googleusercontent.com?project=emacs-gcal-251211&folder&organizationId
  ;; to find your client-id and client-secret
  ;; The MELPA org-gcal doesn't seem to work at this point for me so I'm using the original org-gcal from https://github.com/myuhe/org-gcal.el
  ;; What I do is just download this file: https://github.com/myuhe/org-gcal.el/blob/master/org-gcal.el and then install it with
  ;; M-x package-install-file and then everything should be ok.

  ;; (use-package org-gcal
  ;;    :ensure t
  ;;    :config
  ;;    ;; I stored both these in txt files on my Drive for security reasons
  ;;    (setq org-gcal-client-id (when (file-exists-p "~/google_drive/gtd/")
  ;; 			       (load "~/google_drive/gtd/client_id.txt"))
  ;;       org-gcal-client-secret (when (file-exists-p "~/google_drive/gtd/")
  ;; 			       (load "~/google_drive/gtd/client_secret.txt")) 
  ;;       org-gcal-file-alist '(("cimentadaj@gmail.com" . "~/google_drive/gtd/gcal.org"))))

  (use-package org-gcal
     :ensure t
     :config
     ;; I stored both these in txt files on my Drive for security reasons
     (setq org-gcal-client-id "672622840611-q5j91p8rojnjf5sghgvems2kjkhslg9v.apps.googleusercontent.com"
	org-gcal-client-secret "M7eqO_zAKYlReZVOx-2GGxlc"
	org-gcal-file-alist '(("cimentadaj@gmail.com" . "~/google_drive/gtd/gcal.org"))))


  (setq package-check-signature nil)
  (setq org-gcal-notify-p nil)

  (add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync) ))
  (add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync) ))

#+END_SRC
* [[https://praxis.fortelabs.co/the-p-a-r-a-method-a-universal-system-for-organizing-digital-information-75a9da8bfb37/][P.A.R.A]]
** Functions to move faster acros [[https://praxis.fortelabs.co/the-p-a-r-a-method-a-universal-system-for-organizing-digital-information-75a9da8bfb37/][P.A.R.A]]
#+BEGIN_SRC emacs-lisp

  (defun go-to-projects ()
    (interactive)
    (find-file "~/google_drive/gtd/inbox.org")
    (widen)
    (beginning-of-buffer)
    (re-search-forward "* Projects")
    (beginning-of-line))

  (defun project-overview ()
    (interactive)
    (go-to-projects)
    (org-narrow-to-subtree)
    (org-cycle))

#+END_SRC
** Functions to navigate quickly to org-agenda
#+BEGIN_SRC emacs-lisp

  (defun go-to-today ()
    (interactive)
    (org-agenda nil "n")
    (org-agenda-goto-today)
    (org-agenda-day-view)
    (re-search-forward "Global list of TODO items of type: ALL")
    (beginning-of-line)
    (re-search-forward "project")
    (beginning-of-line)
    )

#+END_SRC
** Functions for daily/weekly review
#+BEGIN_SRC emacs-lisp

  (defun my-new-daily-review ()
    (interactive)
    (let ((org-capture-templates '(("d" "Review: Daily Review" entry (file+olp+datetree "/tmp/daily_reviews.org")
				    (file "~/google_drive/gtd/dailyreviewtemplate.org")))))
      (progn
	(org-capture nil "d")
	(org-capture-finalize t)
	(org-speed-move-safe 'outline-up-heading)
	(org-narrow-to-subtree)
	(fetch-calendar)
	(org-clock-in))))

  (defun work-statistics ()
    (interactive)
    (find-file "~/google_drive/gtd/work_statistics.org"))

  (defun my-new-weekly-review ()
    (interactive)
    (let ((org-capture-templates '(("w" "Review: Weekly Review" entry (file+olp+datetree "/tmp/weekly_reviews.org")
				    (file "~/google_drive/gtd/weeklyreviewtemplate.org")))))
      (progn
	(org-capture nil "d")
	(org-capture-finalize t)
	(org-speed-move-safe 'outline-up-heading)
	(org-narrow-to-subtree)
	(fetch-calendar)
	(org-clock-in))))

#+END_SRC
* Macros
#+BEGIN_SRC emacs-lisp

  ;;  space and then search for next comma:
  ;;  to ident columns such as in dplyr::select or arguments in function

  ;; (fset 'sc
  ;;    [return ?\C-s ?, return])

  ;; (global-set-key (kbd "M-<f3>") 'sc)

#+END_SRC
* Julia
** Set Julia to the julia executable
#+BEGIN_SRC emacs-lisp
  (setq inferior-julia-program-name "/home/jorge/julia-1.4.1/bin/julia")
#+END_SRC
** Julia from scratch
#+BEGIN_SRC emacs-lisp
  (defun jl-scratch ()
    (interactive)
    (progn
      (delete-other-windows)
      (setq new-buf (get-buffer-create "scratch.jl"))
      (switch-to-buffer new-buf)
      (julia-mode)
      (setq w1 (selected-window))
      (setq w1name (buffer-name))
      (setq w2 (split-window w1 nil t))
      (if (not (member "*julia*" (mapcar (function buffer-name) (buffer-list))))
	  (julia))
      (set-window-buffer w2 "*julia*")
      (set-window-buffer w1 w1name)))

  (global-set-key (kbd "C-x 6") 'jl-scratch)

#+END_SRC
** Install other Julia modes (apart from ESS)
#+BEGIN_SRC emacs-lisp

  (use-package julia-mode
    :ensure t)

  (use-package flycheck-julia
    :ensure t
    :init
    (add-hook 'ess-julia-mode-hook #'flycheck-julia-setup))

  (use-package julia-repl
    :ensure t
    :init
    (with-eval-after-load 'julia-mode
      (add-hook 'flycheck-mode-hook #'flycheck-julia-setup)))

  (setq julia-repl-executable-records
	'((default "/home/jorge/julia-1.4.1/bin/julia")))

  ;; (add-to-list 'load-path "/home/jorge/julia-1.3.1/bin/julia")
  ;; (add-hook 'julia-mode-hook 'julia-repl-mode)


#+END_SRC
** Assign operator shortcut
#+BEGIN_SRC emacs-lisp
  (defun assign_julia_operator ()
    "Julia - Insert = operator"
    (interactive)
    (insert " = "))
  (define-key julia-mode-map (kbd "C-<") 'assign_julia_operator)
  (define-key inferior-julia-mode-map (kbd "C-<") 'assign_julia_operator)
#+END_SRC

* Customize eshell
#+BEGIN_SRC emacs-lisp
  ;; (use-package dash
  ;;   :ensure t
  ;;   :init (require 'dash))

  ;; (use-package s
  ;;   :ensure t
  ;;   :init (require 's))

  ;; (use-package all-the-icons
  ;;   :ensure t
  ;;   :init (require 'all-the-icons))

  ;; (defmacro with-face (STR &rest PROPS)
  ;;   "Return STR propertized with PROPS."
  ;;   `(propertize ,STR 'face (list ,@PROPS)))

  ;; (defmacro esh-section (NAME ICON FORM &rest PROPS)
  ;;   "Build eshell section NAME with ICON prepended to evaled FORM with PROPS."
  ;;   `(setq ,NAME
  ;; 	 (lambda () (when ,FORM
  ;; 		      (-> ,ICON
  ;; 			  (concat esh-section-delim ,FORM)
  ;; 			  (with-face ,@PROPS))))))

  ;; (defun esh-acc (acc x)
  ;;   "Accumulator for evaluating and concatenating esh-sections."
  ;;   (--if-let (funcall x)
  ;;       (if (s-blank? acc)
  ;; 	  it
  ;; 	(concat acc esh-sep it))
  ;;     acc))

  ;; (defun esh-prompt-func ()
  ;;   "Build `eshell-prompt-function'"
  ;;   (concat esh-header
  ;; 	  (-reduce-from 'esh-acc "" eshell-funcs)
  ;; 	  "\n"
  ;; 	  eshell-prompt-string))

  ;; (esh-section esh-dir
  ;; 	     "\xf07c"  ;  (faicon folder)
  ;; 	     (abbreviate-file-name (eshell/pwd))
  ;; 	     '(:foreground "gold" :bold ultra-bold :underline t))

  ;; (esh-section esh-git
  ;; 	     "\xe907"  ;  (git icon)
  ;; 	     (magit-get-current-branch)
  ;; 	     '(:foreground "pink"))

  ;; ;; Separator between esh-sections
  ;; (setq esh-sep "  ")  ; or " | "

  ;; ;; Separator between an esh-section icon and form
  ;; (setq esh-section-delim " ")

  ;; ;; Eshell prompt header
  ;; (setq esh-header "")  ; or "\n┌─"

  ;; ;; Eshell prompt regexp and string. Unless you are varying the prompt by eg.
  ;; ;; your login, these can be the same.
  ;; (setq eshell-prompt-regexp " ")   ; or "└─> "
  ;; (setq eshell-prompt-string " ")   ; or "└─> "

  ;; ;; Choose which eshell-funcs to enable
  ;; (setq eshell-funcs (list esh-dir esh-git))

  ;; ;; Enable the new eshell prompt
  ;; (setq eshell-prompt-function 'esh-prompt-func)

#+END_SRC
* Docker
#+BEGIN_SRC emacs-lisp
  (use-package docker-compose-mode
    :ensure t)

  (use-package dockerfile-mode
    :ensure t)

  (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode))
  (put 'dockerfile-image-name 'safe-local-variable #'stringp)

  ;; (use-package docker
  ;;   :ensure t
  ;;   :bind ("C-c d" . docker))

  ;; https://stat.ethz.ch/pipermail/ess-help/2017-April/012252.html

  ;; (defun R-docker ()
  ;;   (interactive)
  ;;   (let ((ess-r-customize-alist
  ;;          (append ess-r-customize-alist
  ;;                  '((inferior-ess-program . "path/to/R-docker"))))
  ;;         (ess-R-readline t))
  ;;     (R)))

#+END_SRC
* Rename buffers
#+BEGIN_SRC emacs-lisp
  (defun rename-file-and-buffer ()
    "Rename the current buffer and file it is visiting."
    (interactive)
    (let ((filename (buffer-file-name)))
      (if (not (and filename (file-exists-p filename)))
	  (message "Buffer is not visiting a file!")
	(let ((new-name (read-file-name "New name: " filename)))
	  (cond
	   ((vc-backend filename) (vc-rename-file filename new-name))
	   (t
	    (rename-file filename new-name t)
	    (set-visited-file-name new-name t t)))))))
#+END_SRC
