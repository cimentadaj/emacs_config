;;; ewal-autoloads.el --- automatically extracted autoloads
;;
;;; Code:

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory #$) (car load-path))))


;;;### (autoloads nil "ewal" "ewal.el" (0 0 0 0))
;;; Generated autoloads from ewal.el

(autoload 'ewal-load-wal-colors "ewal" "\
Read JSON as the most complete of the cached wal files.
COLOR-NAMES will be associated with the first 8 colors of the
cached wal colors. COLOR-NAMES are meant to be used in
conjunction with `ewal-ansi-color-name-symbols'.
\"Special\" wal colors such as \"background\", \"foreground\",
and \"cursor\", tend to (but do not always) correspond to the
remaining colors generated by wal. Add those special colors to
the returned alist. Return nil on failure.

\(fn &optional JSON COLOR-NAMES)" nil nil)

(autoload 'ewal-load-ewal-colors "ewal" "\
Load all relevant `ewal' palettes and colors as environment variables.
Use TTY to determine whether to use TTY colors. Reload
environment variables even if they have already been set if
FORCE-RELOAD is t. Always set `ewal-base-palette' and
`ewal-extended-palette'. Set all extra variables specified in
ordered list VARS, using ordered list FUNCS, applying extra
arguments from nested, ordered list ARGS. VARS, FUNCS, and ARGS
must be of the same length if passed at all.

\(fn &optional FORCE-RELOAD VARS FUNCS ARGS)" nil nil)

(autoload 'ewal-get-color "ewal" "\
Same as `ewal--get-color' but call `ewal-load-ewal-colors' first.
Pass COLOR and SHADE to `ewal--get-color'. Meant to be called
from user config.

\(fn COLOR &optional SHADE)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ewal" '("ewal-")))

;;;***

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; coding: utf-8
;; End:
;;; ewal-autoloads.el ends here
